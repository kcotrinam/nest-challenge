// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int @id @default(autoincrement())
  name        String
  lastname    String
  email       String @unique
  isManager   Boolean @default(value: false) @map("is_manager")   
  password    String
  emailVerificationToken String? @map("email_verification_token")
  emailVerifiedAt DateTime? @map("email_verified_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  likes       Like[]
  tokens      Token[]
  orders      Order[]

  @@map("users")
}

model Category {
  id          Int @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  products    Product[]

  @@map("categories")
}

model Product {
  id          Int @id @default(autoincrement())
  name        String
  description String
  price       Float
  likeCounter Int @default(0) @map("like_counter") //check if optional is not necessary
  stock       Int @default(0)
  image       String?
  isDisabled  Boolean @default(false) @map("is_disabled")
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int? @map("category_id")

  likes       Like[]
  orderItems  orderProduct[]
  attachments Attachment[]
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model Attachment {
  id          Int @id @default(autoincrement())
  key   String
  url String

  product Product @relation(fields: [productId], references: [id])
  productId Int @map("product_id")

  @@map("attachments")
  }



model Like {
  id          Int @id @default(autoincrement())
  product     Product? @relation(fields: [productId], references: [id])
  user        User? @relation(fields: [userId], references: [id])   
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  productId   Int? @map("product_id")
  userId      Int? @map("user_id")

  @@map("likes")
}

model Token {
  id           Int @id @default(autoincrement())
  jti          String
  refreshToken String? @map("refresh_token")
  ttl          DateTime?
  user        User @relation(fields: [userId], references: [id])
  userId    Int @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("tokens")
  }

model Order {
  id          Int @id @default(autoincrement())
  total       Float
  isPaid      Boolean @default(false) @map("is_paid")

  user        User @relation(fields: [userId], references: [id])
  userId      Int @map("user_id")
  orderItems  orderProduct[]

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model orderProduct  {
  id          Int @id @default(autoincrement())
  quantity    Int
  total       Float

  order       Order @relation(fields: [orderId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  orderId     Int @map("order_id")
  productId   Int @map("product_id")

  @@map("order_products")

}